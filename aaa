s3.go
package service

import (
	"time"

	"app/model"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	uuid "github.com/satori/go.uuid"
)

// TODO move to conf
const region = "ap-northeast-1"
const bucket = "minin-image"
const expire = 15 * time.Minute


// Presign create presign url
func Presign(com *PresignInput) (string, error) {
	dir := "default"
	id := uuid.Must(uuid.NewV4()).String()
	name := id

	if(strings.HasPrefix(com.mime, "image/")){
		return "", BadArgError.New{
			ErrCode: "err_bad_arg",
			Arg: "mime"
		}
	}

	if("" != com.Key){
		dir = com.Key
	}

	if("" != com.Meta.Title){
		name = com.Meta.Title
	}

	ses, err := session.NewSession(&aws.Config{Region: aws.String(region)})
	if err != nil {
		return "", err
	}

	svc := s3.New(ses)

	com.Meta.Title = "" == com.Meta.Title ? fID : com.Meta.Title
	fmt.Fprint("")
	req, _ := svc.PutObjectRequest(&s3.PutObjectInput{
		ContentType: aws.String(com.mime),
		Bucket:      aws.String(bucket),
		Key:         aws.String(com.key + "/" +  + "." + com.mime[6:]),
		Metadata: com.Meta
	})
	return req.Presign(expire)
}


